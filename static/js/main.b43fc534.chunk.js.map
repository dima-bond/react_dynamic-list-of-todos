{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","selectedTodos","handleChange","event","target","name","value","setState","this","props","todos","checkTask","selectUser","visibleTodos","filter","todo","title","toLowerCase","includes","completed","className","type","onChange","placeholder","map","key","id","ClassNames","checked","readOnly","onClick","userId","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","user","loadData","prevProps","data","email","phone","clear","App","selectedUserId","handleClear","handleCheckTask","taskId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b43fc534.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport ClassNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedTodos: 'all',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, checkTask, selectUser } = this.props;\n    const { query, selectedTodos } = this.state;\n    const visibleTodos = todos\n      .filter((todo) => {\n        if (query) {\n          return (\n            todo.title !== null\n            && todo.title.toLowerCase().includes(query.toLowerCase())\n          );\n        }\n\n        return todo;\n      })\n      .filter((todo) => {\n        if (selectedTodos === 'Active') {\n          return !todo.completed;\n        }\n\n        if (selectedTodos === 'Completed') {\n          return todo.completed;\n        }\n\n        return todo;\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <label>\n          Filters:\n          {' '}\n          <input\n            type=\"text\"\n            className=\"TodoList__name-filter\"\n            name=\"query\"\n            value={query}\n            onChange={this.handleChange}\n            placeholder=\"Search by title\"\n          />\n        </label>\n        <select\n          name=\"selectedTodos\"\n          value={selectedTodos}\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Active</option>\n          <option>Completed</option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n\n              <li\n                key={todo.id}\n                className={ClassNames('TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => {\n                      checkTask(todo.id);\n                    }}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className={ClassNames(\n                    'TodoList__user-button', 'button',\n                    { 'TodoList__user-button--selected': !todo.completed },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User\n                  {' '}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    title: PropTypes.string,\n  }).isRequired).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  checkTask: PropTypes.func.isRequired,\n};\n","const BASE_URL = `https://mate-api.herokuapp.com`;\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(\n        `${response.status} = ${response.statusText}`,\n      );\n    }\n\n    return response.json();\n  });\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return null;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"button\"\n          onClick={() => {\n            this.props.clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos: todos.data });\n      });\n  }\n\n  handleClear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  handleCheckTask = (taskId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== taskId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            checkTask={this.handleCheckTask}\n            selectUser={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.handleClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}